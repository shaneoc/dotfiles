#!/usr/bin/env python3
# sc-help: starts virtual machines
# sc-category: Virtual Machines
import sys
import os
import argparse
import subprocess
import shutil
import tempfile
import hashlib

tempdir = tempfile.TemporaryDirectory()

def parse_args():
    parser = argparse.ArgumentParser(description='Manage Virtual Machines')

    parser.add_argument('image',
        help='The disk image for the VM')
    parser.add_argument('--hostname',
        help='The hostname of the instance')
    parser.add_argument('--create-overlay-from', metavar='FILENAME',
        help='A preexisting image to use as a backing store for a new disk image')
    parser.add_argument('--copy-image-from', metavar='FILENAME',
        help='A preexisting image to copy from')
    # TODO: implement this
    # parser.add_argument('--copy-into-image', action='append', nargs=2,
    #     metavar=('HOST_PATH','VM_PATH'),
    #     help='Specifies a file or directory to copy into the VM image '
    #         '(can be specified multiple times)')
    parser.add_argument('--user-data', metavar='FILENAME',
        help='The user data file to use')
    parser.add_argument('--cpus', type=int, default=2,
        help='Number of CPUs (default: %(default)s)')
    parser.add_argument('--mem', default='1G',
        help='RAM size (default: %(default)s)')
    parser.add_argument('--name',
        help='Display Name')
    # TODO: consider implementing this, maybe
    # parser.add_argument('--ephemeral', action='store_true',
    #     help='Uses a temporary copy of the image specified so that changes '
    #         'will not be saved on VM shutdown')

    # network options
    parser.add_argument('--net-nat', action='store_true',
        help='Creates a network interface that connects to a private '
            'network that uses NAT to connect to the local network')
    parser.add_argument('--net-nat-forward', action='append', nargs=3,
        metavar=('TYPE', 'HOST_ADDR', 'GUEST_PORT'),
        help="Sets the NAT network to forward a port from the host (TYPE "
            "is 'tdp' or 'udp', HOST_ADDR is either <ip>:<port> or :<port>)")
    parser.add_argument('--net-nat-restrict', action='store_true',
        help='Sets the NAT network to disallow outgoing connections completely')

    parser.add_argument('--net-bridge', action='append', nargs=3,
        metavar=('BRIDGE_NAME', 'MAC_ADDRESS', 'IP_ADDRESS'),
        help="Creates a network interface connected to a bridge (IP can "
            "specify specify subnet with '/xx' or can be set to 'dhcp')")

    return parser.parse_args()

def main():
    args = parse_args()

    kvm_args = ['kvm', '-nographic', '-smp', str(args.cpus), '-m', args.mem]

    # handle name
    if args.name != None:
        kvm_args += ['-name', args.name]

    # handle image
    if args.copy_image_from and args.create_overlay_from:
        sys.exit('Error: --copy-image-from and --create-overlay-from cannot '
            'be used at the same time')

    src_image = args.copy_image_from or args.create_overlay_from
    if src_image:
        if not os.path.exists(src_image):
            sys.exit('Error: {} does not exist'.format(src_image))
        if os.path.exists(args.image):
            sys.exit('Error: {} already exists'.format(args.image))
    else:
        if not os.path.exists(args.image):
            sys.exit('Error: {} does not exist'.format(args.image))

    if args.copy_image_from:
        shutil.copyfile(args.copy_image_from, args.image)
    elif args.create_overlay_from:
        call('qemu-img', 'create', '-f', 'qcow2',
                '-b', args.create_overlay_from, args.image)

    kvm_args += ['-drive',
            'file={},if=virtio'.format(args.image.replace(',',',,'))]

    # add config disk
    instance_id = 'iid-' + hashlib.sha256(args.image.encode('utf-8')).hexdigest()
    config_disk_img = create_config_disk(
            instance_id = instance_id,
            hostname    = args.hostname,
            user_data   = args.user_data)
    kvm_args += ['-drive',
            'file={},if=virtio'.format(config_disk_img.replace(',',',,'))]

    # handle networking
    net_count = 0
    if args.net_nat:
        nat_args = ['id=net{}'.format(net_count)]
        nat_args += ['restrict={}'.format('on' if args.net_nat_restrict else 'off')]
        if args.net_nat_forward:
            for type, host_addr, guest_port in args.net_nat_forward:
                if type not in ('tcp', 'udp'):
                    sys.exit('Error: NAT forward type must be tcp or udp')
                nat_args += ['hostfwd={}:{}-:{}'.format(type, host_addr, guest_port)]

        kvm_args += ['-device', 'virtio-net,netdev=net{}'.format(net_count)]
        kvm_args += ['-netdev', 'user,{}'.format(','.join(nat_args))]
        net_count += 1

    if args.net_bridge:
        helper = get_helper()
        for bridge_name, mac_addr, ip_addr in args.net_bridge:
            kvm_args += ['-device', 'virtio-net,netdev=net{},mac={}'
                    .format(net_count, mac_addr)]
            kvm_args += ['-netdev', 'bridge,id=net{},br={},helper={}'
                    .format(net_count, bridge_name, helper)]
            # TODO: set IP address as well
        net_count += 1

    call(*kvm_args)

def call(*args):
    print('$ ' + ' '.join(args))
    subprocess.check_call(args)

def create_config_disk(instance_id, hostname = None, user_data = None, dsmode = None):
    # https://cloudinit.readthedocs.org/en/latest/topics/datasources.html#no-cloud
    user_data = user_data or '/dev/null'
    dsmode    = dsmode    or 'net'
    temp_user_data   = os.path.join(tempdir.name, 'user-data')
    temp_meta_data   = os.path.join(tempdir.name, 'meta-data')
    temp_config_disk = os.path.join(tempdir.name, 'config-disk.img')

    shutil.copyfile(user_data, temp_user_data)
    with open(temp_meta_data, 'w') as f:
        f.write('instance-id: {}\n'.format(instance_id))
        if hostname != None:
            f.write('local-hostname: {}\n'.format(hostname))
        f.write('dsmode: {}\n'.format(dsmode))
        f.flush()

    call('genisoimage', '-output', temp_config_disk, '-volid', 'cidata',
            '-joliet', '-rock', temp_user_data, temp_meta_data)

    return temp_config_disk

def get_helper():
    # TODO: find a better way to do this
    from stat import S_ISUID
    path = '/usr/lib/qemu-bridge-helper'
    if not (os.stat(path).st_mode & S_ISUID):
        sys.exit(
            'Error: /usr/lib/qemu-bridge-helper has incorrect permissions, '
            'maybe you need to run this?\n'
            'sudo dpkg-statoverride --update --add root shane 4754 '
            '/usr/lib/qemu-bridge-helper')
    return path

if __name__ == '__main__':
    main()
